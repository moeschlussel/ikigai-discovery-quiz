'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Brain, Loader2, Sparkles } from 'lucide-react';
import { useQuiz } from '@/contexts/quiz-context';
import type { UserProfile } from '@/contexts/quiz-context';
import { getAIService } from '@/lib/ai-service';

interface AdaptiveQuestionsProps {
  onComplete: () => void;
}

interface AdaptiveQuestion {
  targetCategory: string;
  question: string;
  options: string[];
  reasoning?: string;
}

export function AdaptiveQuestions({ onComplete }: AdaptiveQuestionsProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string>('');
  const [currentQuestionData, setCurrentQuestionData] = useState<AdaptiveQuestion | null>(null);
  const [isInitializing, setIsInitializing] = useState(true);
  const [isGeneratingQuestion, setIsGeneratingQuestion] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [askedQuestions, setAskedQuestions] = useState<string[]>([]);
  const [usedAnswers, setUsedAnswers] = useState<Set<string>>(new Set());
  const { addAnswer, answers, userProfile, setUserProfile, quizFramework } = useQuiz();

  const totalAdaptiveQuestions = 11; // Questions 10-20
  const currentQuestionNumber = 10 + currentQuestion;

  useEffect(() => {
    initializeProfileFromFixedQuestions();
  }, []);

  useEffect(() => {
    if (userProfile.Passion.confidence > 0 && currentQuestion < totalAdaptiveQuestions) {
      generateNextAdaptiveQuestion();
    }
  }, [currentQuestion, userProfile]);

  const initializeProfileFromFixedQuestions = async () => {
    setIsInitializing(true);
    
    try {
      const aiService = getAIService();
      
      // Format fixed questions for AI analysis
      const formattedAnswers = answers.slice(1).map(answer => ({
        question: answer.questionText,
        options: [], // We don't have the original options, but AI can work with just the question and selected answer
        selected: answer.selectedAnswer
      }));

      const profileResult = await aiService.initializeProfile({
        quizStyle: quizFramework,
        answers: formattedAnswers
      });
      
      setUserProfile(profileResult.userProfile);
    } catch (error) {
      console.error('Failed to initialize profile with AI:', error);
      // Fallback to basic initialization
      initializeFallbackProfile();
    }
    
    setIsInitializing(false);
  };

  const initializeFallbackProfile = () => {
    // Basic fallback profile initialization
    setUserProfile({
      Passion: { description: 'Exploring creative and meaningful pursuits', confidence: 60 },
      Profession: { description: 'Developing technical and analytical skills', confidence: 65 },
      Mission: { description: 'Contributing to positive change in the world', confidence: 45 },
      Vocation: { description: 'Building sustainable career opportunities', confidence: 55 },
      Traits: {
        'Risk Tolerance': { value: 'Moderate', confidence: 60 },
        'Time Horizon': { value: 'Medium-term', confidence: 65 },
        'Lifestyle Desires': { value: 'Balanced', confidence: 70 },
        'Biggest Fears': { value: 'Uncertainty', confidence: 60 },
        'Ideal Work Environment': { value: 'Collaborative', confidence: 65 }
      }
    });
  };

  const generateNextAdaptiveQuestion = async () => {
    if (currentQuestion >= totalAdaptiveQuestions) {
      onComplete();
      return;
    }

    setIsGeneratingQuestion(true);
    
    try {
      // Find category with lowest confidence
      const categories = ['Passion', 'Profession', 'Mission', 'Vocation'] as const;
      const targetCategory = categories.reduce((lowest, current) => 
        userProfile[current].confidence < userProfile[lowest].confidence ? current : lowest
      );

      const aiService = getAIService();
      
      // Get all previous questions (including fixed questions)
      const allPreviousQuestions = [
        ...answers.map(answer => answer.questionText),
        ...askedQuestions
      ];

      // Get all previous answer options to avoid duplication
      const allUsedAnswers = Array.from(usedAnswers);

      const questionResult = await aiService.generateAdaptiveQuestion({
        currentProfile: userProfile,
        targetCategory,
        quizStyle: quizFramework,
        questionNumber: currentQuestionNumber,
        previousQuestions: allPreviousQuestions,
        usedAnswerOptions: allUsedAnswers
      });

      // Check if this question or its answers are too similar to previous ones
      if (isQuestionTooSimilar(questionResult.question, allPreviousQuestions) || 
          hasRepeatedAnswers(questionResult.options, allUsedAnswers)) {
        // Try again with more specific requirements
        const fallbackQuestion = await generateFallbackUniqueQuestion(targetCategory, allPreviousQuestions, allUsedAnswers);
        setCurrentQuestionData(fallbackQuestion);
      } else {
        setCurrentQuestionData(questionResult);
      }

      // Track this question and its answers
      setAskedQuestions(prev => [...prev, questionResult.question]);
      setUsedAnswers(prev => {
        const newSet = new Set(prev);
        questionResult.options.forEach(option => newSet.add(option.toLowerCase().trim()));
        return newSet;
      });

    } catch (error) {
      console.error('Failed to generate adaptive question:', error);
      // Generate a unique fallback question
      const allPreviousQuestions = [
        ...answers.map(answer => answer.questionText),
        ...askedQuestions
      ];
      const fallbackQuestion = await generateFallbackUniqueQuestion('Passion', allPreviousQuestions, Array.from(usedAnswers));
      setCurrentQuestionData(fallbackQuestion);
    }
    
    setIsGeneratingQuestion(false);
  };

  // Helper function to check if question is too similar
  const isQuestionTooSimilar = (newQuestion: string, previousQuestions: string[]): boolean => {
    const newQuestionWords = newQuestion.toLowerCase().split(' ').filter(word => word.length > 3);
    
    return previousQuestions.some(prevQuestion => {
      const prevWords = prevQuestion.toLowerCase().split(' ').filter(word => word.length > 3);
      const commonWords = newQuestionWords.filter(word => prevWords.includes(word));
      return commonWords.length >= Math.min(3, newQuestionWords.length * 0.5);
    });
  };

  // Helper function to check for repeated answers
  const hasRepeatedAnswers = (newOptions: string[], usedAnswers: string[]): boolean => {
    return newOptions.some(option => 
      usedAnswers.some(usedAnswer => 
        option.toLowerCase().trim() === usedAnswer ||
        calculateSimilarity(option.toLowerCase(), usedAnswer) > 0.8
      )
    );
  };

  // Simple similarity calculation
  const calculateSimilarity = (str1: string, str2: string): number => {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    const commonWords = words1.filter(word => words2.includes(word));
    return commonWords.length / Math.max(words1.length, words2.length);
  };

  // Generate a guaranteed unique fallback question
  const generateFallbackUniqueQuestion = async (category: string, previousQuestions: string[], usedAnswers: string[]): Promise<AdaptiveQuestion> => {
    const uniqueQuestions = {
      Passion: [
        {
          question: "Which of these weekend activities would most excite you?",
          options: [
            "Attending a creative workshop or art exhibition",
            "Taking apart something to understand how it works",
            "Volunteering for a cause you believe in",
            "Starting a small business or side project"
          ]
        },
        {
          question: "When you daydream about your ideal future, what stands out most?",
          options: [
            "Having the freedom to express yourself creatively",
            "Being recognized as an expert in your field",
            "Making a meaningful difference in people's lives",
            "Building financial security and independence"
          ]
        },
        {
          question: "What type of book or content do you find most engaging?",
          options: [
            "Biographies of artists and creative innovators",
            "Technical guides and educational content",
            "Stories of social change and human resilience",
            "Business strategies and success principles"
          ]
        }
      ],
      Profession: [
        {
          question: "In a work environment, what energizes you most?",
          options: [
            "Brainstorming creative solutions to challenges",
            "Analyzing data and optimizing processes",
            "Collaborating with diverse teams",
            "Leading projects and driving results"
          ]
        },
        {
          question: "What type of feedback do you find most valuable?",
          options: [
            "Appreciation for your creative vision and originality",
            "Recognition of your expertise and attention to detail",
            "Acknowledgment of your positive impact on others",
            "Validation of your strategic thinking and results"
          ]
        },
        {
          question: "When learning something new, what approach works best for you?",
          options: [
            "Experimenting freely and finding your own way",
            "Following structured courses and proven methods",
            "Learning from mentors and peer discussions",
            "Focusing on practical applications and outcomes"
          ]
        }
      ],
      Mission: [
        {
          question: "What global challenge concerns you most personally?",
          options: [
            "Loss of cultural diversity and creative expression",
            "Lack of access to quality education and information",
            "Social inequality and mental health issues",
            "Economic instability and job insecurity"
          ]
        },
        {
          question: "How do you prefer to contribute to your community?",
          options: [
            "Through artistic expression or cultural events",
            "By sharing knowledge and teaching skills",
            "By directly helping individuals in need",
            "By creating opportunities and economic value"
          ]
        },
        {
          question: "What legacy would you most want to leave behind?",
          options: [
            "Beautiful creations that inspire future generations",
            "Knowledge and innovations that advance understanding",
            "Lives touched and communities strengthened",
            "Systems and organizations that create lasting value"
          ]
        }
      ],
      Vocation: [
        {
          question: "What motivates you most about career advancement?",
          options: [
            "Having more creative freedom and resources",
            "Developing deeper expertise and mastery",
            "Gaining influence to help more people",
            "Achieving financial goals and stability"
          ]
        },
        {
          question: "How do you define professional success?",
          options: [
            "Creating work that you're truly proud of",
            "Being recognized as highly skilled in your field",
            "Having a positive impact on others' lives",
            "Achieving your financial and lifestyle goals"
          ]
        },
        {
          question: "What work environment brings out your best performance?",
          options: [
            "Flexible spaces that encourage creative thinking",
            "Well-organized environments with clear processes",
            "Collaborative settings with strong team dynamics",
            "Results-oriented cultures with clear incentives"
          ]
        }
      ]
    };

    const categoryQuestions = uniqueQuestions[category as keyof typeof uniqueQuestions] || uniqueQuestions.Passion;
    
    // Find a question that hasn't been asked
    for (const questionData of categoryQuestions) {
      if (!previousQuestions.includes(questionData.question) && 
          !hasRepeatedAnswers(questionData.options, usedAnswers)) {
        return {
          targetCategory: category,
          question: questionData.question,
          options: questionData.options,
          reasoning: `Exploring ${category} through a unique perspective`
        };
      }
    }

    // If all questions have been used, create a completely new one
    return {
      targetCategory: category,
      question: `What aspect of ${category.toLowerCase()} matters most to you right now?`,
      options: [
        `Finding new ways to explore ${category.toLowerCase()}`,
        `Developing stronger ${category.toLowerCase()} foundations`,
        `Connecting with others through ${category.toLowerCase()}`,
        `Building practical ${category.toLowerCase()} skills`
      ],
      reasoning: `Final unique exploration of ${category}`
    };
  };

  const handleAnswerSelect = async (answer: string) => {
    if (isProcessing || !currentQuestionData) return;

    setSelectedAnswer(answer);
    setIsProcessing(true);

    // Visual feedback delay
    await new Promise(resolve => setTimeout(resolve, 400));

    const selectedOption = currentQuestionData.options[answer.charCodeAt(0) - 65];

    // Record the answer
    addAnswer({
      questionText: currentQuestionData.question,
      selectedAnswer: selectedOption,
      mappedCategories: [currentQuestionData.targetCategory],
      questionNumber: currentQuestionNumber,
      options: currentQuestionData.options,
      selectedIndex: answer.charCodeAt(0) - 65,
    });

    // Update profile with AI
    try {
      const aiService = getAIService();
      const updateResult = await aiService.updateProfile({
        currentProfile: userProfile,
        targetCategory: currentQuestionData.targetCategory,
        question: currentQuestionData.question,
        selectedAnswer: selectedOption,
        quizStyle: quizFramework
      });

      setUserProfile(updateResult.updatedProfile);
    } catch (error) {
      console.error('Failed to update profile with AI:', error);
      // Fallback update
      updateProfileFallback(currentQuestionData.targetCategory, selectedOption);
    }

    if (currentQuestion < totalAdaptiveQuestions - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer('');
      setIsProcessing(false);
    } else {
      // Small delay before completing
      await new Promise(resolve => setTimeout(resolve, 300));
      onComplete();
    }
  };

  const updateProfileFallback = (category: string, answer: string) => {
    const updated = { ...userProfile };
    
    // Simple confidence boost for the target category
    if (category === 'Passion') {
      updated.Passion.confidence = Math.min(updated.Passion.confidence + 15, 95);
    } else if (category === 'Profession') {
      updated.Profession.confidence = Math.min(updated.Profession.confidence + 15, 95);
    } else if (category === 'Mission') {
      updated.Mission.confidence = Math.min(updated.Mission.confidence + 15, 95);
    } else if (category === 'Vocation') {
      updated.Vocation.confidence = Math.min(updated.Vocation.confidence + 15, 95);
    }
    
    setUserProfile(updated);
  };

  const progress = ((currentQuestion + 1) / totalAdaptiveQuestions) * 100;

  if (isInitializing) {
    return (
      <Card className="max-w-3xl mx-auto bg-white/80 backdrop-blur-sm border-0 shadow-xl">
        <CardContent className="flex flex-col items-center justify-center py-16">
          <Brain className="w-16 h-16 text-purple-600 animate-pulse mb-6" />
          <h3 className="text-2xl font-bold text-gray-800 mb-4">Analyzing Your Responses</h3>
          <p className="text-gray-600 text-center max-w-md mb-6">
            Our AI is analyzing your answers holistically to build your personalized Ikigai profile...
          </p>
          <div className="flex items-center gap-2 text-sm text-gray-500">
            <Loader2 className="w-4 h-4 animate-spin" />
            Creating your unique profile
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isGeneratingQuestion || !currentQuestionData) {
    return (
      <Card className="max-w-3xl mx-auto bg-white/80 backdrop-blur-sm border-0 shadow-xl">
        <CardContent className="flex flex-col items-center justify-center py-16">
          <Sparkles className="w-12 h-12 text-purple-600 animate-pulse mb-6" />
          <h3 className="text-xl font-bold text-gray-800 mb-4">Crafting Your Next Question</h3>
          <p className="text-gray-600 text-center max-w-md mb-6">
            AI is analyzing your profile to create a personalized question that explores your areas of growth...
          </p>
          <div className="flex items-center gap-2 text-sm text-gray-500">
            <Loader2 className="w-4 h-4 animate-spin" />
            Targeting: {(() => {
              const categories = ['Passion', 'Profession', 'Mission', 'Vocation'] as const;
              return categories.reduce((lowest, current) => 
                userProfile[current].confidence < userProfile[lowest].confidence ? current : lowest
              );
            })()}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="max-w-3xl mx-auto bg-white/80 backdrop-blur-sm border-0 shadow-xl">
      <CardHeader className="pb-6">
        <div className="flex items-center justify-between mb-4">
          <div className="text-sm text-gray-500">
            Question {currentQuestionNumber} of 20
          </div>
          <div className="text-sm font-medium text-purple-600 flex items-center gap-2">
            <Sparkles className="w-4 h-4" />
            AI-Powered Questions
          </div>
        </div>
        <Progress value={progress} className="h-2 mb-6" />
        <CardTitle className="text-2xl font-bold text-gray-800 leading-relaxed">
          {currentQuestionData.question}
        </CardTitle>
        {currentQuestionData.reasoning && (
          <p className="text-sm text-gray-600 italic mt-2">
            🎯 {currentQuestionData.reasoning}
          </p>
        )}
        <div className="text-xs text-purple-600 mt-2">
          Exploring: {currentQuestionData.targetCategory}
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <RadioGroup value={selectedAnswer} onValueChange={handleAnswerSelect}>
          {currentQuestionData.options.map((option, index) => {
            const optionKey = String.fromCharCode(65 + index);
            const isSelected = selectedAnswer === optionKey;
            const isDisabled = isProcessing && !isSelected;
            
            return (
              <div key={optionKey} className="relative">
                <Label
                  htmlFor={`adaptive-${optionKey}`}
                  className={`flex items-center space-x-4 p-4 rounded-lg border-2 cursor-pointer transition-all duration-300 ${
                    isSelected
                      ? 'border-purple-500 bg-purple-50 shadow-sm scale-[1.01]'
                      : isDisabled
                      ? 'border-gray-200 bg-gray-50 opacity-50 cursor-not-allowed'
                      : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-md'
                  }`}
                >
                  <RadioGroupItem value={optionKey} id={`adaptive-${optionKey}`} className="sr-only" />
                  <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center flex-shrink-0 transition-all duration-300 ${
                    isSelected
                      ? 'border-purple-500 bg-purple-500 scale-110'
                      : 'border-gray-300'
                  }`}>
                    {isSelected && isProcessing ? (
                      <Loader2 className="w-4 h-4 text-white animate-spin" />
                    ) : isSelected ? (
                      <div className="w-3 h-3 rounded-full bg-white"></div>
                    ) : null}
                  </div>
                  <div className="flex-1">
                    <p className="text-base font-medium text-gray-800">{option}</p>
                  </div>
                </Label>
              </div>
            );
          })}
        </RadioGroup>

        {isProcessing && (
          <div className="text-center py-4">
            <p className="text-sm text-gray-600">
              {currentQuestion === totalAdaptiveQuestions - 1 
                ? 'Generating your final Ikigai profile...' 
                : 'Updating your profile and preparing next question...'
              }
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}